import tkinter as tk
from tkinter import ttk
from tkinter import messagebox,font,colorchooser,filedialog
import os
main_application=tk.Tk()
main_application.geometry('1200x800')
main_application.title('V_Text_Editor')
main_application.wm_iconbitmap('icon.ico')

#...................................main menu...............................................
main_menu=tk.Menu(main_application)
#......................file.......................................................
new_icon=tk.PhotoImage(file='icons2/new.png')
open_icon=tk.PhotoImage(file='icons2/open.png')
save_icon=tk.PhotoImage(file='icons2/save.png')
saveas_icon=tk.PhotoImage(file='icons2/save_as.png')
exit_icon=tk.PhotoImage(file='icons2/exit.png')

file=tk.Menu(main_menu,tearoff=False)

#....................edit................................................................
copy_icon=tk.PhotoImage(file='icons2/copy.png')
paste_icon=tk.PhotoImage(file='icons2/paste.png')
cut_icon=tk.PhotoImage(file='icons2/cut.png')
clear_all_icon=tk.PhotoImage(file='icons2/clear_all.png')
find_icon=tk.PhotoImage(file='icons2/find.png')

edit=tk.Menu(main_menu,tearoff=False)

#...............view...........................................................
toolbar_icon=tk.PhotoImage(file='icons2/tool_bar.png')
statusbar_icon=tk.PhotoImage(file='icons2/status_bar.png')

view=tk.Menu(main_menu,tearoff=False)

#...........................colortheme..............................................
red_icon=tk.PhotoImage(file='icons2/red.png')
dark_icon=tk.PhotoImage(file='icons2/dark.png')
monokai_icon=tk.PhotoImage(file='icons2/monokai.png')
night_blue_icon=tk.PhotoImage(file='icons2/night_blue.png')
light_default_icon=tk.PhotoImage(file='icons2/light_default.png')
light_plus_icon=tk.PhotoImage(file='icons2/light_plus.png')

color_theme=tk.Menu(main_menu,tearoff=False)

theme_choice=tk.StringVar()
color_icons=(red_icon,dark_icon,monokai_icon,night_blue_icon,light_default_icon,light_plus_icon)
dic={
    'red':('#2d2d2d', '#ffe8e8'),
    'dark': ('#c4c4c4', '#2d2d2d'),
    'monokai':('#d3b774', '#474747'),
    'night blue':('#ededed', '#6b9dc2'),
    'light default':('#000000', '#ffffff'),
    'light plus':('#474747', '#e0e0e0')
}

main_menu.add_cascade(label='File',menu=file)
main_menu.add_cascade(label='Edit',menu=edit)
main_menu.add_cascade(label='View',menu=view)
main_menu.add_cascade(label='ColorTheme',menu=color_theme)

#...................................toolbar.............................

toolbar=ttk.Label(main_application)
toolbar.pack(side=tk.TOP,fill=tk.X)

font_tuple=tk.font.families()
font_family=tk.StringVar()
font_box=ttk.Combobox(toolbar,width=30,textvariable=font_family,state='readonly')
font_box['values']=font_tuple
font_box.grid(row=0,column=0,padx=5)
font_box.current(font_tuple.index('Arial'))

size_var=tk.IntVar()
font_size=ttk.Combobox(toolbar,width=14,textvariable=size_var,state='readonly')
font_size['values']=tuple(range(8,100,2))
font_size.current(3)
font_size.grid(row=0,column=1,padx=5)

bold_icon=tk.PhotoImage(file='icons2/bold.png')
bold_btn=ttk.Button(toolbar,image=bold_icon)
bold_btn.grid(row=0,column=2,padx=5)

italic_icon=tk.PhotoImage(file='icons2/italic.png')
italic_btn=ttk.Button(toolbar,image=italic_icon)
italic_btn.grid(row=0,column=3,padx=5)

underline_icon=tk.PhotoImage(file='icons2/underline.png')
underline_btn=ttk.Button(toolbar,image=underline_icon)
underline_btn.grid(row=0,column=4,padx=5)

font_color_icon=tk.PhotoImage(file='icons2/font_color.png')
font_color_btn=ttk.Button(toolbar,image=font_color_icon)
font_color_btn.grid(row=0,column=5,padx=5)

align_left_icon=tk.PhotoImage(file='icons2/align_left.png')
align_left_btn=ttk.Button(toolbar,image=align_left_icon)
align_left_btn.grid(row=0,column=6,padx=5)

align_center_icon=tk.PhotoImage(file='icons2/align_center.png')
align_center_btn=ttk.Button(toolbar,image=align_center_icon)
align_center_btn.grid(row=0,column=7,padx=5)

align_right_icon=tk.PhotoImage(file='icons2/align_right.png')
align_right_btn=ttk.Button(toolbar,image=align_right_icon)
align_right_btn.grid(row=0,column=8,padx=5)

#...................................text editor.........................

text_editor=tk.Text(main_application)
text_editor.config(wrap='word',relief=tk.FLAT)

scroll_bar=tk.Scrollbar(main_application)
text_editor.focus_set()
scroll_bar.pack(side=tk.RIGHT,fill=tk.Y)
text_editor.pack(fill=tk.BOTH,expand=True)
scroll_bar.config(command=text_editor.yview)
text_editor.config(yscrollcommand=scroll_bar.set)

#Text Editor Functionality
curr_font='Arial'
curr_size=12

def change_font(o):
    global curr_font
    curr_font=font_family.get()
    text_editor.config(font=(curr_font,curr_size))
font_box.bind("<<ComboboxSelected>>",change_font)                #binding.....
def change_size(main_application):
    global curr_size
    curr_size=size_var.get()
    text_editor.config(font=(curr_font,curr_size))
font_size.bind("<<ComboboxSelected>>",change_size)    

text_editor.config(font=('Arial',12))   #.......configure

# button Functionality
def change_bold():
    text_property=tk.font.Font(font=text_editor['font'])
    if text_property.actual()['weight']=='normal':
        text_editor.config(font=(curr_font,curr_size,'bold'))
    if text_property.actual()['weight']=='bold':
        text_editor.config(font=(curr_font,curr_size,'normal'))
# bold_btn=ttk.Button(toolbar,image=bold_icon,command=change_bold)
# bold_btn.grid(row=0,column=3,padx=5)        
bold_btn.config(command=change_bold)        

#button Italic Functionality
def change_italic():
    text_property=tk.font.Font(font=text_editor['font'])
    if text_property.actual()['slant']=='roman':
          text_editor.configure(font=(curr_font,curr_size,'italic'))
    if text_property.actual()['slant']=='italic':
        text_editor.configure(font=('roman'))     
italic_btn.configure(command=change_italic)      

def change_line():
    text_property=tk.font.Font(font=text_editor['font'])
    if text_property.actual()['underline']==0:
          text_editor.config(font=(curr_font,curr_size,'underline'))
    if text_property.actual()['underline']==1:
        text_editor.config(font=(curr_font,curr_size,'normal'))     
underline_btn.config(command=change_line)   

def change_font_color():
    color=tk.colorchooser.askcolor()
    text_editor.config(fg=color[1])
font_color_btn.config(command=change_font_color)   

# print(tk.font.Font(font=text_editor['font']).actual())

def left_align():
    text_content=text_editor.get(1.0,'end')
    text_editor.tag_config('left',justify=tk.LEFT)
    text_editor.delete(1.0,tk.END)
    text_editor.insert(tk.INSERT,text_content,'left')
align_left_btn.config(command=left_align)    
def center_align():
    text_content=text_editor.get(1.0,'end')
    text_editor.tag_config('center',justify=tk.CENTER)
    text_editor.delete(1.0,tk.END)
    text_editor.insert(tk.INSERT,text_content,'center')
align_center_btn.config(command=center_align)   
def right_align():
    text_content=text_editor.get(1.0,'end')
    text_editor.tag_config('right',justify=tk.RIGHT)
    text_editor.delete(1.0,tk.END)
    text_editor.insert(tk.INSERT,text_content,'right')
align_right_btn.config(command=right_align)   

#...................................main status bar..........................

status_bar=ttk.Label(main_application,text='Status Bar')
status_bar.pack(side=tk.BOTTOM)
text_changed=False
def changed(main_application):
    global text_changed
    if text_editor.edit_modified():
        text_changed=True
        words=len(text_editor.get(1.0,'end-1c').split())
        characters=len(text_editor.get(1.0,'end-1c'))        #.replace(' ','')
        status_bar.config(text=f'Characters : {characters}  Words : {words}')
    text_editor.edit_modified(False)
text_editor.bind('<<Modified>>',changed)    

# #..................................main menu functionality.............
url=''

def new_file(event=None):
    global url
    url=''
    text_editor.delete(1.0,'end-1c')    #  tk.END 
    main_application.title('Untiled.txt')

file.add_command(label='New',image=new_icon,compound=tk.LEFT,accelerator='Ctrl+N',command=new_file)

def open_file(event=None):
    global url
    url=filedialog.askopenfilename(initialdir=os.getcwd(),title='Select File',filetypes=(('TextFile','*.txt'),('All Files','*.*')))
    try:
        with open(url,'r',encoding='utf-8') as fr:
            text_editor.delete(1.0,tk.END)
            text_editor.insert(1.0,fr.read())
    except FileNotFoundError:
        return
    except:
        return
    main_application.title(os.path.basename(url))

file.add_command(label='Open',image=open_icon,compound=tk.LEFT,accelerator='Ctrl+O',command=open_file)

def save_file():
    global url
    try:
        if url:
            content=str(text_editor.get(1.0,tk.END))
            with open(url,'w',encoding='utf-8') as fw:
                fr.write(content)
        else:
            content2=str(text_editor.get(1.0,tk.END))
            url=filedialog.asksaveasfile(mode='w',defaultextension='.txt',filetypes=(('Text File','*.txt'),('All Files','*.*')))
            url.write(content2)
            url.close()
    except:
        return                                       
                                         
file.add_command(label='Save',image=save_icon,compound=tk.LEFT,accelerator='Ctrl+S',command=save_file)

def saveas_file(event=None):
    global url
    content2=str(text_editor.get(1.0,tk.END))
    url=filedialog.asksaveasfile(mode='w',defaultextension='.txt',filetypes=(('Text Files','*.txt'),('All Files','*.*')))
    url.write(content2)
    url.close()
    
file.add_command(label='SaveAs',image=saveas_icon,compound=tk.LEFT,accelerator='Ctrl+Alt+S',command=saveas_file)

def exit_file(event=None):
    global url
    try:
        if text_changed:
            mbox=messagebox.askyesnocancel('Warning','Do you want to save file?')
            if mbox==True:
                if url:
                    content=str(text_editor.get(1.0,tk.END))
                    with open(url,'w',encoding='utf-8') as f:
                            f.write(content)
                            main_application.destroy()
                else:
                    content2=str(text_editor.get(1.0,tk.END))
                    url=filedialog.asksaveasfile(mode='w',defaultextension='.txt',filetypes=(('Text Files','*.txt'),('All Files','*.*')))
                    url.write(content2)
                    url.close()
                    main_application.destroy
            elif mbox==False:
                main_application.destroy()
            else:
                return
        else:
            main_application.destroy()
    except:      
        return

file.add_command(label='Exit',image=exit_icon,compound=tk.LEFT,accelerator='Ctrl+Q',command=exit_file)

def main_find(event=None):
    def find():
        word=find_entry.get()
        text_editor.tag_remove('match','1.0',tk.END)
        matches=0
        if word:
            start_pos='1.0'
            while True:
                start_pos=text_editor.search(word,start_pos,stopindex=tk.END)
                if not start_pos:
                    break
                end_pos=f'{start_pos}+{len(word)}c'
                text_editor.tag_add('match',start_pos,end_pos)
                text_editor.tag_config('match',foreground='red',background='yellow')
                matches+=1
                start_pos=end_pos
    def replace():
        word=find_entry.get()
        replace=replace_entry.get()
        content=text_editor.get(1.0,tk.END)
        new=content.replace(word,replace)
        text_editor.delete(1.0,tk.END)
        text_editor.insert(1.0,new)
    
    find_dialog=tk.Toplevel()
    find_dialog.geometry('450x250+500+200')
    find_dialog.resizable(0,0)
    find_dialog.title('FindReplace')
    find_frame=ttk.LabelFrame(find_dialog,text='FIND/REPLACE')
    find_frame.pack(pady=20)
    find_label=ttk.Label(find_frame,text='FIND: ')
    replace_label=ttk.Label(find_frame,text='REPLACE: ')
    find_entry=ttk.Entry(find_frame,width=30)
    replace_entry=ttk.Entry(find_frame,width=30)
    find_label.grid(row=0,column=0,padx=4,pady=4)
    replace_label.grid(row=1,column=0,padx=4,pady=4)
    find_entry.grid(row=0,column=1,padx=4,pady=4)
    replace_entry.grid(row=1,column=1,padx=4,pady=4)
    find_button=ttk.Button(find_frame,text='Find',command=find)
    replace_button=ttk.Button(find_frame,text='Replace',command=replace)
    find_button.grid(row=2,column=0,padx=10,pady=4)
    replace_button.grid(row=2,column=1,padx=8,pady=4)
    find_dialog.mainloop()

edit.add_command(label='Copy',image=copy_icon,accelerator='Ctrl+C',compound=tk.LEFT,command=lambda: text_editor.event_generate("<Control c>"))
edit.add_command(label='Paste',image=paste_icon,accelerator='Ctrl+V',compound=tk.LEFT,command=lambda: text_editor.event_generate("<Control v>"))
edit.add_command(label='Cut',image=cut_icon,accelerator='Ctrl+X',compound=tk.LEFT,command=lambda: text_editor.event_generate("<Control x>"))
edit.add_command(label='Clear All',image=clear_all_icon,accelerator='Ctrl+Alt+X',compound=tk.LEFT,command=lambda: text_editor.delete(1.0,tk.END))
edit.add_command(label='Find',image=find_icon,accelerator='Ctrl+F',compound=tk.LEFT,command=main_find)

toolbar_var=tk.BooleanVar()
toolbar_var.set(True)
statusbar_var=tk.BooleanVar()
statusbar_var.set(True)

def hide_toolbar():
    global toolbar_var
    if toolbar_var:
        toolbar.pack_forget()
        toolbar_var=False
    else :
        text_editor.pack_forget()
        status_bar.pack_forget()
        toolbar.pack(side=tk.TOP,fill=tk.X)
        status_bar.pack(side=tk.BOTTOM,fill=tk.X)
        text_editor.pack(expand=True,fill=tk.BOTH)
        toolbar_var=True
def hide_statusbar():
    global statusbar_var
    if statusbar_var:
        status_bar.pack_forget()
        statusbar_var=False
    else:
        text_editor.pack_forget()
        toolbar.pack_forget()
        status_bar.pack(side=tk.BOTTOM)
        toolbar.pack(side=tk.TOP,fill=tk.X)
        text_editor.pack(expand=True,fill=tk.BOTH)
        statusbar_var=True

view.add_checkbutton(label='Toolbar',image=toolbar_icon,compound=tk.LEFT,onvalue=True,offvalue=False,variable=toolbar_var,
                    command=hide_toolbar)
view.add_checkbutton(label='Statusbar',image=statusbar_icon,compound=tk.LEFT,onvalue=True,offvalue=False,variable=statusbar_var,
                    command=hide_statusbar)

def change_theme():
    chosen_theme=theme_choice.get()
    fg,bg=dic[chosen_theme]
    text_editor.config(background=bg,foreground=fg)
c=0
for i in dic:
    color_theme.add_radiobutton(label=i,image=color_icons[c],compound=tk.LEFT,variable=theme_choice,command=change_theme)
    c+=1

    
main_application.bind("<Control-n>",new_file)   
main_application.bind("<Control-o>",open_file)   
main_application.bind("<Control-s>",save_file)   
main_application.bind("<Control-Alt-s>",saveas_file)   
main_application.bind("<Control-q>",exit_file)  
main_application.bind("<Control-f>",main_find)   
main_application.config(menu=main_menu)
main_application.mainloop()